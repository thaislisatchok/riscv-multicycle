  -------------------------------------------------------------------
-- Name        : de0_lite.vhd
-- Author      : 
-- Version     : 0.1
-- Copyright   : Departamento de Eletrônica, Florianópolis, IFSC
-- Description : Projeto base DE10-Lite
-------------------------------------------------------------------
LIBRARY ieee;
USE IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

entity de10_lite is 
	port (
		---------- CLOCK ----------
		ADC_CLK_10:	in std_logic;
		MAX10_CLK1_50: in std_logic;
		MAX10_CLK2_50: in std_logic;
		
		----------- SDRAM ------------
		DRAM_ADDR: out std_logic_vector (12 downto 0);
		DRAM_BA: out std_logic_vector (1 downto 0);
		DRAM_CAS_N: out std_logic;
		DRAM_CKE: out std_logic;
		DRAM_CLK: out std_logic;
		DRAM_CS_N: out std_logic;		
		DRAM_DQ: inout std_logic_vector(15 downto 0);
		DRAM_LDQM: out std_logic;
		DRAM_RAS_N: out std_logic;
		DRAM_UDQM: out std_logic;
		DRAM_WE_N: out std_logic;
		
		----------- SEG7 ------------
		HEX0: out std_logic_vector(7 downto 0);
		HEX1: out std_logic_vector(7 downto 0);
		HEX2: out std_logic_vector(7 downto 0);
		HEX3: out std_logic_vector(7 downto 0);
		HEX4: out std_logic_vector(7 downto 0);
		HEX5: out std_logic_vector(7 downto 0);

		----------- KEY ------------
		KEY: in std_logic_vector(1 downto 0);

		----------- LED ------------
		LEDR: out std_logic_vector(9 downto 0);

		----------- SW ------------
		SW: in std_logic_vector(9 downto 0);

		----------- VGA ------------
		VGA_B: out std_logic_vector(3 downto 0);
		VGA_G: out std_logic_vector(3 downto 0);
		VGA_HS: out std_logic;
		VGA_R: out std_logic_vector(3 downto 0);
		VGA_VS: out std_logic;
	
		----------- Accelerometer ------------
		GSENSOR_CS_N: out std_logic;
		GSENSOR_INT: in std_logic_vector(2 downto 1);
		GSENSOR_SCLK: out std_logic;
		GSENSOR_SDI: inout std_logic;
		GSENSOR_SDO: inout std_logic;
	
		----------- Arduino ------------
		ARDUINO_IO: inout std_logic_vector(15 downto 0);
		ARDUINO_RESET_N: inout std_logic
	);
end entity;


architecture rtl of de10_lite is
    signal dataa : unsigned(7 downto 0);
    signal datab : unsigned(7 downto 0);
    signal product8x8_out : unsigned(15 downto 0);
    signal segs : unsigned(7 downto 0);
    
    signal dataa_c : std_logic_vector (7 downto 0);
    signal datab_c : std_logic_vector(7 downto 0);
    signal product8x8_out_c : std_logic_vector(15 downto 0);
    signal segs_c : std_logic_vector(7 downto 0);
    
    
    component Probe is
        port (
            source : out std_logic_vector(15 downto 0);                    -- source
            probe  : in  std_logic_vector(15 downto 0) := (others => 'X')  -- probe
        );
    end component Probe;
    
    type seg_array is array (0 to 3) of std_logic_vector (7 downto 0);
    signal displays : seg_array;
    
    type seg_array_u is array (0 to 3) of unsigned (7 downto 0);
    signal displays_u : seg_array_u;
    
    type product_array is array (0 to 3) of unsigned (3 downto 0);
    signal product_segs : product_array;
    
begin
    
u0 : component Probe
    port map (
        source(7 downto 0) => dataa_c, -- sources.source
        source(15 downto 8) => datab_c,
        probe(15 downto 0)  => product8x8_out_c   --  probes.probe
    );
    
    dataa <= unsigned(dataa_c);
    datab <= unsigned(datab_c);
    product8x8_out_c <= std_logic_vector(product8x8_out);
    segs_c <= std_logic_vector(segs);
	
mult8x8_inst : entity work.mult8x8
    port map(
        dataa          => dataa,
        datab          => datab,
        start          => SW(1),
        reset_a        => SW(0),
        clk            => SW(5),
        done_flag      => LEDR(0),
        product8x8_out => product8x8_out,
        segs           => segs
    );
	
product_segs(0) <= product8x8_out(3 downto 0);
product_segs(1) <= product8x8_out(7 downto 4);
product_segs(2) <= product8x8_out(11 downto 8);
product_segs(3) <= product8x8_out(15 downto 12);

seg_gen: for i in 0 to 3 generate
        conv_seg: entity work.seven_segment_cntrl
            port map(
                    input => product_segs(i),
                    segs  => displays_u(i)
                );
            
end generate;

HEX0 <= segs_c;

displays(0) <= std_logic_vector(displays_u(0));
displays(1) <= std_logic_vector(displays_u(1));
displays(2) <= std_logic_vector(displays_u(2));
displays(3) <= std_logic_vector(displays_u(3));

HEX1 <= displays(0);
HEX2 <= displays(1);    
HEX3 <= displays(2);	
HEX4 <= displays(3);

end;

